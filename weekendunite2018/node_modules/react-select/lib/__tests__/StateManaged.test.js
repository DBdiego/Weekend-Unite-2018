'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _jestInCase = require('jest-in-case');

var _jestInCase2 = _interopRequireDefault(_jestInCase);

var _constants = require('./constants');

var _ = require('../');

var _2 = _interopRequireDefault(_);

var _components = require('../components');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Control = _components.components.Control,
    Menu = _components.components.Menu,
    MultiValue = _components.components.MultiValue,
    Placeholder = _components.components.Placeholder,
    Option = _components.components.Option;


var BASIC_PROPS = { options: _constants.OPTIONS, name: 'test-input-name' };

test('defaults > snapshot', function () {

  var tree = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, null));
  expect((0, _enzymeToJson2.default)(tree)).toMatchSnapshot();
});

test('multi select > selecting multiple values', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, BASIC_PROPS, { isMulti: true })));
  // Open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });
  expect(selectWrapper.find(Control).text()).toBe('0');

  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });
  expect(selectWrapper.find(Control).text()).toBe('01');
});

test('multi select > to not show selected value in options', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, BASIC_PROPS, { isMulti: true })));

  // Open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });

  var availableOptions = selectWrapper.find(Option).map(function (option) {
    return option.text();
  });
  expect(availableOptions.indexOf('0') > -1).toBeTruthy();

  // select the first option
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });

  // Re-open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  availableOptions = selectWrapper.find(Option).map(function (option) {
    return option.text();
  });

  expect(availableOptions.indexOf('0') > -1).toBeFalsy();
});

test('multi select > remove the last selected option on backspace', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, BASIC_PROPS, { isMulti: true })));

  // Open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });

  // select the first option
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });

  // Re-open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  // select the first option again
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });
  expect(selectWrapper.find(Control).text()).toBe('01');

  selectWrapper.find(Control).simulate('keyDown', { keyCode: 8, key: 'Backspace' });
  expect(selectWrapper.find(Control).text()).toBe('0');
});

test('multi select > clicking on X next to selection option', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { options: _constants.OPTIONS, isMulti: true, defaultValue: [_constants.OPTIONS[2], _constants.OPTIONS[4]] }));
  // there are two values in select
  expect(selectWrapper.find(MultiValue).length).toBe(2);
  // select has 2 and 4 as value
  expect(selectWrapper.find(Control).text()).toBe('24');

  var selectFirstValueWrapper = selectWrapper.find(MultiValue).at(0);
  selectFirstValueWrapper.find('div.react-select__multi-value__remove').simulate('click', { button: 0 });
  // now there is one values in select
  expect(selectWrapper.find(MultiValue).length).toBe(1);
  // first value 2, is removed from the select
  expect(selectWrapper.find(Control).text()).toBe('4');
});

/**
 * backspace is not removing the option when isClearable and backspaceRemovesValue true
 * This is working in example on website not working on enzyme wrapper
 */
(0, _jestInCase2.default)('hitting backspace with selected options', function (_ref) {
  var _ref$props = _ref.props,
      props = _ref$props === undefined ? BASIC_PROPS : _ref$props,
      expectedValueAfterBackSpace = _ref.expectedValueAfterBackSpace;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find(Control).text()).toBe(props.value.label);
  selectWrapper.find(Control).simulate('keyDown', { keyCode: 8, key: 'Backspace' });
  expect(selectWrapper.find(Control).text()).toBe(expectedValueAfterBackSpace);
}, {
  'single select > should not remove when backspaceRemovesValue is false': {
    props: _extends({}, BASIC_PROPS, {
      isClearable: true,
      backspaceRemovesValue: false,
      value: _constants.OPTIONS[3]
    }),
    expectedValueAfterBackSpace: _constants.OPTIONS[3].label
  },
  'single select > should remove when backspaceRemovesValue is true': {
    props: _extends({}, BASIC_PROPS, {
      isClearable: true,
      backspaceRemovesValue: true,
      value: _constants.OPTIONS[3]
    }),
    expectedValueAfterBackSpace: '',
    skip: true
  },
  'multi select - should not remove when backspaceRemovesValue is false': {
    props: _extends({}, BASIC_PROPS, {
      isClearable: true,
      isMulti: false,
      backspaceRemovesValue: false,
      value: _constants.OPTIONS[5]
    }),
    expectedValueAfterBackSpace: _constants.OPTIONS[5].label
  },
  'multi select - should not remove when backspaceRemovesValue is true': {
    props: _extends({}, BASIC_PROPS, {
      isClearable: true,
      isMulti: false,
      backspaceRemovesValue: true,
      value: _constants.OPTIONS[5]
    }),
    expectedValueAfterBackSpace: '',
    skip: true
  }
});

(0, _jestInCase2.default)('click on dropdown indicator', function (_ref2) {
  var _ref2$props = _ref2.props,
      props = _ref2$props === undefined ? BASIC_PROPS : _ref2$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  // Menu not open by defualt
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
  // Open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();

  // close open menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
}, {
  'single select > should toggle Menu': {},
  'multi select > should toggle Menu': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('selecting an option > mouse interaction', function (_ref3) {
  var _ref3$props = _ref3.props,
      props = _ref3$props === undefined ? _extends({}, BASIC_PROPS) : _ref3$props,
      event = _ref3.event,
      selectOption = _ref3.selectOption,
      expectSelectedOption = _ref3.expectSelectedOption;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  var toSelectOption = selectWrapper.find('div.react-select__option').findWhere(function (n) {
    return n.props().children === selectOption.label;
  });
  toSelectOption.simulate.apply(toSelectOption, _toConsumableArray(event));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe(expectSelectedOption);
}, {
  'single select > clicking on an option > should select the clicked option': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true
    }),
    event: ['click', { button: 0 }],
    selectOption: _constants.OPTIONS[2],
    expectSelectedOption: 'two'
  },
  'multi select > clicking on an option > should select the clicked option': {
    props: _extends({}, BASIC_PROPS, {
      delimiter: ', ',
      isMulti: true,
      menuIsOpen: true
    }),
    event: ['click', { button: 0 }],
    selectOption: _constants.OPTIONS[2],
    expectSelectedOption: 'two'
  }
});

(0, _jestInCase2.default)('selection an option > keyboard interaction', function (_ref4) {
  var _ref4$props = _ref4.props,
      props = _ref4$props === undefined ? _extends({}, BASIC_PROPS) : _ref4$props,
      eventsToSimulate = _ref4.eventsToSimulate,
      expectedSelectedOption = _ref4.expectedSelectedOption;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  // open the menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('keyDown', { keyCode: 40, key: 'ArrowDown' });
  eventsToSimulate.map(function (eventToSimulate) {
    var _selectWrapper$find;

    (_selectWrapper$find = selectWrapper.find(Menu)).simulate.apply(_selectWrapper$find, _toConsumableArray(eventToSimulate));
  });
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe(expectedSelectedOption);
}, {
  'single select > open select and hit enter > should select first option': {
    eventsToSimulate: [],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'single select > (open select -> 3 x ArrowDown -> Enter) > should select the forth option in the select': {
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[3].value
  },
  'single select > (open select -> 2 x ArrowDown -> 2 x ArrowUp -> Enter) > should select the first option in the select': {
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 38, key: 'ArrowUp' }], ['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'single select > (open select -> 1 x ArrowUp -> Enter) > should select the last option in the select': {
    eventsToSimulate: [['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'single select > (open select -> 1 x PageDown -> Enter) > should select the first option on next page - default pageSize 5': {
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }]],
    expectedSelectedOption: _constants.OPTIONS[5].value
  },
  'single select > (open select -> 1 x PageDown -> 1 x ArrowDown -> 1 x PageUp -> Enter) > should select the second option - default pageSize 5': {
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 33, key: 'PageUp' }]],
    expectedSelectedOption: _constants.OPTIONS[1].value
  },
  'single select > (open select -> End -> Enter) > should select the last option': {
    eventsToSimulate: [['keyDown', { keyCode: 35, key: 'End' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'single select > (open select -> 3 x PageDown -> Home -> Enter) > should select the last option': {
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 36, key: 'Home' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'single select > cycle options > ( open select -> End -> ArrowDown -> Enter) > should select the first option': {
    eventsToSimulate: [['keyDown', { keyCode: 35, key: 'End' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'single select > cycle options > (open select -> ArrowUp -> Enter) > should select the last option': {
    eventsToSimulate: [['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'multi select > open select and hit enter > should select first option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'multi select > (open select -> 3 x ArrowDown -> Enter) > should select the forth option in the select': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[3].value
  },
  'multi select > (open select -> 2 x ArrowDown -> 2 x ArrowUp -> Enter) > should select the first option in the select': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 38, key: 'ArrowUp' }], ['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'multi select > (open select -> 1 x ArrowUp -> Enter) > should select the last option in the select': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'multi select > (open select -> 1 x PageDown -> Enter) > should select the first option on next page - default pageSize 5': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }]],
    expectedSelectedOption: _constants.OPTIONS[5].value
  },
  'multi select > (open select -> 1 x PageDown -> 1 x ArrowDown -> 1 x PageUp -> Enter) > should select the second option - default pageSize 5': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 33, key: 'PageUp' }]],
    expectedSelectedOption: _constants.OPTIONS[1].value
  },
  'multi select > (open select -> End -> Enter) > should select the last option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 35, key: 'End' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'multi select > (open select -> 3 x PageDown -> Home -> Enter) > should select the last option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 36, key: 'Home' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'multi select > cycle options > ( open select -> End -> ArrowDown -> Enter) > should select the first option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 35, key: 'End' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'multi select > cycle options > (open select -> ArrowUp -> Enter) > should select the last option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  }
});

(0, _jestInCase2.default)('accessibility - select input with defaults', function (_ref5) {
  var _ref5$props = _ref5.props,
      props = _ref5$props === undefined ? BASIC_PROPS : _ref5$props,
      _ref5$expectAriaHaspo = _ref5.expectAriaHaspopup,
      expectAriaHaspopup = _ref5$expectAriaHaspo === undefined ? false : _ref5$expectAriaHaspo,
      _ref5$expectAriaExpan = _ref5.expectAriaExpanded,
      expectAriaExpanded = _ref5$expectAriaExpan === undefined ? false : _ref5$expectAriaExpan;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  var selectInput = selectWrapper.find('Control input');

  expect(selectInput.props().role).toBe('combobox');
  expect(selectInput.props()['aria-haspopup']).toBe(expectAriaHaspopup);
  expect(selectInput.props()['aria-expanded']).toBe(expectAriaExpanded);
}, {
  'single select > with menu closed > input should have aria role combobox, and aria-haspopup, aria-expanded as false': {},
  'single select > with menu open > input should have aria role combobox, and aria-haspopup, aria-expanded as true': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true
    }),
    expectAriaHaspopup: true,
    expectAriaExpanded: true
  },
  'multi select > with menu closed > input should have aria role combobox, and aria-haspopup, aria-expanded as false': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  },
  'multi select > with menu open > input should have aria role combobox, and aria-haspopup, aria-expanded as true': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true
    }),
    expectAriaHaspopup: true,
    expectAriaExpanded: true
  }
});

/**
 * TODO: Need to get hightlight a menu option and then match value with aria-activedescendant prop
 */
(0, _jestInCase2.default)('accessibility > aria-activedescendant', function (_ref6) {
  var _ref6$props = _ref6.props,
      props = _ref6$props === undefined ? _extends({}, BASIC_PROPS, { value: { label: '2', value: 'two' }, menuIsOpen: true }) : _ref6$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  var selectInput = selectWrapper.find('Control input');
  var activeDescendant = selectInput.props()['aria-activedescendant'];
  expect(selectWrapper.find(('#' + activeDescendant).text())).toBe('2');
}, {
  'single select': {
    skip: true
  },
  'multi select': {
    skip: true,
    props: _extends({}, BASIC_PROPS, {
      value: { label: '2', value: 'two' }
    })
  }
});

(0, _jestInCase2.default)('accessibility > passes through aria-labelledby prop', function (_ref7) {
  var _ref7$props = _ref7.props,
      props = _ref7$props === undefined ? _extends({}, BASIC_PROPS, { 'aria-labelledby': 'testing' }) : _ref7$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find('Control input').props()['aria-labelledby']).toBe('testing');
}, {
  'single select > should pass aria-labelledby prop down to input': {},
  'multi select > should pass aria-labelledby prop down to input': {
    props: _extends({}, BASIC_PROPS, {
      'aria-labelledby': 'testing',
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('accessibility > passes through aria-describedby prop', function (_ref8) {
  var _ref8$props = _ref8.props,
      props = _ref8$props === undefined ? _extends({}, BASIC_PROPS, { 'aria-describedby': 'testing' }) : _ref8$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find('Control input').props()['aria-describedby']).toBe('testing');
}, {
  'single select > should pass aria-labelledby prop down to input': {},
  'multi select > should pass aria-labelledby prop down to input': {
    props: _extends({}, BASIC_PROPS, {
      'aria-describedby': 'testing',
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('accessibility > passes through aria-label prop', function (_ref9) {
  var _ref9$props = _ref9.props,
      props = _ref9$props === undefined ? _extends({}, BASIC_PROPS, { 'aria-label': 'testing' }) : _ref9$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find('Control input').props()['aria-label']).toBe('testing');
}, {
  'single select > should pass aria-labelledby prop down to input': {},
  'multi select > should pass aria-labelledby prop down to input': {
    props: _extends({}, BASIC_PROPS, {
      'aria-label': 'testing',
      isMulti: true
    })
  }
});

/**
 * Not a case anymore, not getting this label in V2
 */
test.skip('accessibility > multi select > remove value label', function () {
  var props = _extends({}, BASIC_PROPS, { isMulti: true, value: [_constants.OPTIONS[0], _constants.OPTIONS[1]] });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper).toBeTruthy();
});

(0, _jestInCase2.default)('autoFocus', function (_ref10) {
  var _ref10$props = _ref10.props,
      props = _ref10$props === undefined ? BASIC_PROPS : _ref10$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find('Control input').props().id).toBe(document.activeElement.id);
}, {
  'single select > should focus select on mount': {
    props: _extends({}, BASIC_PROPS, {
      autoFocus: true
    })
  },
  'multi select > should focus select on mount': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      autoFocus: true
    })
  }
});

/**
 * onFocus hook is not being called when component is mounted is autoFocus true
 * Reproducible here ->  https://codesandbox.io/s/71xrkj0qj
 */
(0, _jestInCase2.default)('onFocus prop', function (_ref11) {
  var _ref11$props = _ref11.props,
      props = _ref11$props === undefined ? _extends({}, BASIC_PROPS, { autoFocus: true }) : _ref11$props;

  var onFocusSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, props, { onFocus: onFocusSpy })));
  expect(selectWrapper.find('Control input').props().id).toBe(document.activeElement.id);
  expect(onFocusSpy).toHaveBeenCalledTimes(1);
}, {
  'single select > should call auto focus only once when select is autoFocus': {
    skip: true
  },
  'multi select > should call auto focus only once when select is autoFocus': {
    skip: true,
    props: _extends({}, BASIC_PROPS, {
      autoFocus: true,
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('placeholder', function (_ref12) {
  var props = _ref12.props,
      _ref12$expectPlacehol = _ref12.expectPlaceholder,
      expectPlaceholder = _ref12$expectPlacehol === undefined ? 'Select...' : _ref12$expectPlacehol;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find('Control').text()).toBe(expectPlaceholder);
}, {
  'single select > should display default placeholder "Select...': {},
  'single select > should display provided placeholder': {
    props: {
      placeholder: 'single Select...'
    },
    expectPlaceholder: 'single Select...'
  },
  'multi select > should display default placeholder "Select...': {},
  'multi select > should display provided placeholder': {
    props: {
      placeholder: 'multi Select...'
    },
    expectPlaceholder: 'multi Select...'
  }
});

(0, _jestInCase2.default)('display placeholder once value is removed', function (_ref13) {
  var props = _ref13.props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find(Placeholder).exists()).toBeFalsy();
  selectWrapper.setProps({ value: '' });
  expect(selectWrapper.find(Placeholder).exists()).toBeTruthy();
}, {
  'single select > should display placeholder once the value is removed from select': {
    props: _extends({}, BASIC_PROPS, {
      value: _constants.OPTIONS[0]
    })
  },
  'multi select > should display placeholder once the value is removed from select': {
    props: _extends({}, BASIC_PROPS, {
      value: _constants.OPTIONS[0]
    })
  }
});

(0, _jestInCase2.default)('onMenuOpen called when menu is opened', function (_ref14) {
  var _ref14$props = _ref14.props,
      props = _ref14$props === undefined ? BASIC_PROPS : _ref14$props;

  var onMenuOpenSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, props, { onMenuOpen: onMenuOpenSpy })));
  // Menu not open by defualt
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
  expect(onMenuOpenSpy).not.toHaveBeenCalled();
  // Open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  // onMenuOpenSpy
  expect(onMenuOpenSpy).toHaveBeenCalledTimes(1);
}, {
  'single select > should call onMenuOpen prop on opening menu': {},
  'multi select > should call onMenuOpen prop on opening menu': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('OnMenuClose called when menu is closed', function (_ref15) {
  var _ref15$props = _ref15.props,
      props = _ref15$props === undefined ? _extends({}, BASIC_PROPS, { menuIsOpen: true }) : _ref15$props;

  var onMenuCloseSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, props, { onMenuClose: onMenuCloseSpy })));
  // Menu is open by defualt
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();
  expect(onMenuCloseSpy).not.toHaveBeenCalled();
  // closing Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(onMenuCloseSpy).toHaveBeenCalledTimes(1);
}, {
  'single select > should call onMenuClose prop on closing menu': {},
  'multi select > should call onMenuClose prop on closing menu': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true
    })
  }
});

(0, _jestInCase2.default)('menuIsOpen prop', function (_ref16) {
  var _ref16$props = _ref16.props,
      props = _ref16$props === undefined ? _extends({}, BASIC_PROPS, { menuIsOpen: true }) : _ref16$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  // menu is not closed
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();
}, {
  'single select > should maintain a menuIsOpen value in state if menuIsOpen is passed as prop': {},
  'multi select > should maintain a menuIsOpen value in state if menuIsOpen is passed as prop': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true
    })
  }
});

(0, _jestInCase2.default)('value prop', function (_ref17) {
  var _ref17$props = _ref17.props,
      props = _ref17$props === undefined ? _extends({}, BASIC_PROPS, { value: _constants.OPTIONS[0] }) : _ref17$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe('zero');

  // select new value from option
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  selectWrapper.find(Option).at(4).find('div').simulate('click', { button: 0 });

  // value stays the same as passed by props
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe('zero');
}, {
  'single select > should always show the value passed as props': {},
  'multi select > should always show the value passed as props': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      value: _constants.OPTIONS[0]
    })
  }
});

/**
 * Unable to trigger change event on input and test
 * as event.currentTarget.value goes as empty string
 */
test.skip('inputValue prop > should not update the inputValue when on change of input if inputValue prop is provided', function () {
  var props = _extends({}, BASIC_PROPS, { inputValue: _constants.OPTIONS[0].label });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  selectWrapper.find('Control input').simulate('change', { currentTarget: { value: 'A' }, target: { value: 'A' } });
  expect(selectWrapper.find('Control input').props().value).toBe('0');
});

test('renders a read only input when isSearchable is false', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { options: _constants.OPTIONS, isSearchable: false }));
  var inputWrapper = selectWrapper.find('Control input');
  expect(inputWrapper.props().readOnly).toBe(true);
});

test('not hide the options from the menu if hideSelectedOptions is false', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { options: _constants.OPTIONS, hideSelectedOptions: false, isMulti: true, menuIsOpen: true }));
  var firstOption = selectWrapper.find(Option).at(0);
  var secondoption = selectWrapper.find(Option).at(1);
  expect(firstOption.text()).toBe('0');
  expect(secondoption.text()).toBe('1');

  firstOption.find('div.react-select__option').simulate('click', { button: 0 });

  expect(firstOption.text()).toBe('0');
  expect(secondoption.text()).toBe('1');
});