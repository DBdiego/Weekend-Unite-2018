'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _jestInCase = require('jest-in-case');

var _jestInCase2 = _interopRequireDefault(_jestInCase);

var _constants = require('./constants');

var _Select = require('../Select');

var _Select2 = _interopRequireDefault(_Select);

var _components = require('../components');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Control = _components.components.Control,
    IndicatorsContainer = _components.components.IndicatorsContainer,
    DropdownIndicator = _components.components.DropdownIndicator,
    Menu = _components.components.Menu,
    MultiValue = _components.components.MultiValue,
    NoOptionsMessage = _components.components.NoOptionsMessage,
    Option = _components.components.Option,
    ValueContainer = _components.components.ValueContainer,
    SingleValue = _components.components.SingleValue;


test('snapshot - defaults', function () {
  var tree = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, null));
  expect((0, _enzymeToJson2.default)(tree)).toMatchSnapshot();
});

(0, _jestInCase2.default)('formatOptionLabel', function (_ref) {
  var props = _ref.props,
      valueComponent = _ref.valueComponent,
      expectedOptions = _ref.expectedOptions;

  var tree = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  var value = tree.find(valueComponent).at(0);
  expect(value.props().children).toBe(expectedOptions);
}, {
  'single select > should format label of options according to text returned by formatOptionLabel': {
    props: {
      formatOptionLabel: function formatOptionLabel(_ref2, _ref3) {
        var label = _ref2.label,
            value = _ref2.value;
        var context = _ref3.context;
        return label + ' ' + value + ' ' + context;
      },
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[0]
    },
    valueComponent: SingleValue,
    expectedOptions: '0 zero value'
  },
  'multi select > should format label of options according to text returned by formatOptionLabel': {
    props: {
      formatOptionLabel: function formatOptionLabel(_ref4, _ref5) {
        var label = _ref4.label,
            value = _ref4.value;
        var context = _ref5.context;
        return label + ' ' + value + ' ' + context;
      },
      isMulti: true,
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[0]
    },
    valueComponent: MultiValue,
    expectedOptions: '0 zero value'
  }
});
(0, _jestInCase2.default)('name prop', function (_ref6) {
  var expectedName = _ref6.expectedName,
      props = _ref6.props;

  var tree = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  var input = tree.find('input');
  expect(input.props().name).toBe(expectedName);
}, {
  'single select > should assign the given name': { props: { name: 'form-field-single-select' }, expectedName: 'form-field-single-select' },
  'multi select > should assign the given name': {
    props: {
      name: 'form-field-multi-select',
      isMulti: true,
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[2]
    },
    expectedName: 'form-field-multi-select'
  }
});

(0, _jestInCase2.default)('menuIsOpen prop', function (_ref7) {
  var props = _ref7.props;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();

  selectWrapper.setProps({ menuIsOpen: true });
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();

  selectWrapper.setProps({ menuIsOpen: false });
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
}, {
  'single select > should show menu if menuIsOpen is true and hide menu if menuIsOpen prop is false': {
    props: {
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[2]
    }
  },
  'multi select > should show menu if menuIsOpen is true and hide menu if menuIsOpen prop is false': {
    props: {
      value: _constants.OPTIONS[2],
      options: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('filterOption() prop - should filter only if function returns truthy for value', function (_ref8) {
  var props = _ref8.props,
      searchString = _ref8.searchString,
      expectResultsLength = _ref8.expectResultsLength;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  selectWrapper.setProps({ inputValue: searchString });
  expect(selectWrapper.find(Option).length).toBe(expectResultsLength);
}, {
  'single select > should filter all options as per searchString': {
    props: {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[0],
      menuIsOpen: true
    },
    searchString: 'o',
    expectResultsLength: 5
  },
  'multi select > should filter all options other that options in value of select': {
    props: {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[0],
      menuIsOpen: true,
      isMulti: true
    },
    searchString: 'o',
    expectResultsLength: 4
  }
});

(0, _jestInCase2.default)('no option found on search based on filterOption prop', function (_ref9) {
  var props = _ref9.props,
      searchString = _ref9.searchString;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  selectWrapper.setProps({ inputValue: searchString });
  expect(selectWrapper.find(NoOptionsMessage).exists()).toBeTruthy();
}, {
  'single Select > should show NoOptionsMessage': {
    props: {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[0],
      menuIsOpen: true
    },
    searchString: 'some text not in options'
  },
  'multi select > should show NoOptionsMessage': {
    props: {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[0],
      menuIsOpen: true
    },
    searchString: 'some text not in options'
  }
});

(0, _jestInCase2.default)('value prop', function (_ref10) {
  var props = _ref10.props,
      expectedValue = _ref10.expectedValue;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.state('selectValue')).toEqual(expectedValue);
}, {
  'single select > should set it as initial value': {
    props: {
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[2]
    },
    expectedValue: [{ label: '2', value: 'two' }]
  },
  'single select > with option values as number > should set it as initial value': {
    props: {
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[2]
    },
    expectedValue: [{ label: '2', value: 2 }]
  },
  'multi select > should set it as initial value': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[1]
    },
    expectedValue: [{ label: '1', value: 'one' }]
  },
  'multi select > with option values as number > should set it as initial value': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[1]
    },
    expectedValue: [{ label: '1', value: 1 }]
  }
});

(0, _jestInCase2.default)('update the value prop', function (_ref11) {
  var _ref11$props = _ref11.props,
      props = _ref11$props === undefined ? { options: _constants.OPTIONS, value: _constants.OPTIONS[1], name: 'test-input-name' } : _ref11$props,
      updateValueTo = _ref11.updateValueTo,
      expectedInitialValue = _ref11.expectedInitialValue,
      expectedUpdatedValue = _ref11.expectedUpdatedValue;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toEqual(expectedInitialValue);

  selectWrapper.setProps({ value: updateValueTo });
  expect(selectWrapper.find('input[type="hidden"]').props().value).toEqual(expectedUpdatedValue);
}, {
  'single select > should update the value when prop is updated': {
    updateValueTo: _constants.OPTIONS[3],
    expectedInitialValue: 'one',
    expectedUpdatedValue: 'three'
  },
  'single select > value of options is number > should update the value when prop is updated': {
    props: {
      name: 'test-input-name',
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[2]
    },
    updateValueTo: _constants.OPTIONS_NUMBER_VALUE[3],
    expectedInitialValue: 2,
    expectedUpdatedValue: 3
  },
  'multi select > should update the value when prop is updated': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[1],
      name: 'test-input-name'
    },
    updateValueTo: _constants.OPTIONS[3],
    expectedInitialValue: 'one',
    expectedUpdatedValue: 'three'
  },
  'multi select > value of options is number > should update the value when prop is updated': {
    props: {
      delimiter: ',',
      isMulti: true,
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[2],
      name: 'test-input-name'
    },
    updateValueTo: [_constants.OPTIONS_NUMBER_VALUE[3], _constants.OPTIONS_NUMBER_VALUE[2]],
    expectedInitialValue: '2',
    expectedUpdatedValue: '3,2'
  }
});
(0, _jestInCase2.default)('selecting an option', function (_ref12) {
  var _ref12$props = _ref12.props,
      props = _ref12$props === undefined ? { menuIsOpen: true, options: _constants.OPTIONS } : _ref12$props,
      event = _ref12.event,
      expectedSelectedOption = _ref12.expectedSelectedOption,
      optionsSelected = _ref12.optionsSelected,
      focusedOption = _ref12.focusedOption;

  var spy = jest.fn();
  var multiSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onChange: spy, onInputChange: jest.fn(), onMenuClose: jest.fn() })));

  var selectOption = multiSelectWrapper.find('div.react-select__option').findWhere(function (n) {
    return n.props().children === optionsSelected.label;
  });
  multiSelectWrapper.setState({ focusedOption: focusedOption });

  selectOption.simulate.apply(selectOption, _toConsumableArray(event));
  expect(spy).toHaveBeenCalledWith(expectedSelectedOption, { action: 'select-option' });
}, {
  'single select > option is clicked > should call onChange() prop with selected option': {
    event: ['click'],
    optionsSelected: { label: '2', value: 'two' },
    expectedSelectedOption: { label: '2', value: 'two' }
  },
  'single select > option with number value > option is clicked > should call onChange() prop with selected option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS_NUMBER_VALUE
    },
    event: ['click'],
    optionsSelected: { label: '0', value: 0 },
    expectedSelectedOption: { label: '0', value: 0 }
  },
  'single select > option with boolean value > option is clicked > should call onChange() prop with selected option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS_BOOLEAN_VALUE
    },
    event: ['click'],
    optionsSelected: { label: 'true', value: true },
    expectedSelectedOption: { label: 'true', value: true }
  },
  'single select > tab key is pressed while focusing option > should call onChange() prop with selected option': {
    event: ['keyDown', { keyCode: 9, key: 'Tab' }],
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    expectedSelectedOption: { label: '1', value: 'one' }
  },
  'single select > enter key is pressed while focusing option > should call onChange() prop with selected option': {
    event: ['keyDown', { keyCode: 13, key: 'Enter' }],
    optionsSelected: { label: '3', value: 'three' },
    focusedOption: { label: '3', value: 'three' },
    expectedSelectedOption: { label: '3', value: 'three' }
  },
  'single select > space key is pressed while focusing option > should call onChange() prop with selected option': {
    event: ['keyDown', { keyCode: 32, Key: 'Spacebar' }],
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    expectedSelectedOption: { label: '1', value: 'one' }
  },
  'multi select > option is clicked > should call onChange() prop with selected option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    event: ['click'],
    optionsSelected: { label: '2', value: 'two' },
    expectedSelectedOption: [{ label: '2', value: 'two' }]
  },
  'multi select > option with number value > option is clicked > should call onChange() prop with selected option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS_NUMBER_VALUE
    },
    event: ['click'],
    optionsSelected: { label: '0', value: 0 },
    expectedSelectedOption: [{ label: '0', value: 0 }]
  },
  'multi select > option with boolean value > option is clicked > should call onChange() prop with selected option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS_BOOLEAN_VALUE
    },
    event: ['click'],
    optionsSelected: { label: 'true', value: true },
    expectedSelectedOption: [{ label: 'true', value: true }]
  },
  'multi select > tab key is pressed while focusing option > should call onChange() prop with selected option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    event: ['keyDown', { keyCode: 9, key: 'Tab' }],
    menuIsOpen: true,
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    expectedSelectedOption: [{ label: '1', value: 'one' }]
  },
  'multi select > enter key is pressed while focusing option > should call onChange() prop with selected option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    event: ['keyDown', { keyCode: 13, key: 'Enter' }],
    optionsSelected: { label: '3', value: 'three' },
    focusedOption: { label: '3', value: 'three' },
    expectedSelectedOption: [{ label: '3', value: 'three' }]
  },
  'multi select > space key is pressed while focusing option > should call onChange() prop with selected option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    event: ['keyDown', { keyCode: 32, key: 'Spacebar' }],
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    expectedSelectedOption: [{ label: '1', value: 'one' }]
  }
});

(0, _jestInCase2.default)('hitting escape on select option', function (_ref13) {
  var props = _ref13.props,
      event = _ref13.event,
      focusedOption = _ref13.focusedOption,
      optionsSelected = _ref13.optionsSelected;

  var spy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onChange: spy, onInputChange: jest.fn(), onMenuClose: jest.fn() })));

  var selectOption = selectWrapper.find('div.react-select__option').findWhere(function (n) {
    return n.props().children === optionsSelected.label;
  });
  selectWrapper.setState({ focusedOption: focusedOption });

  selectOption.simulate.apply(selectOption, _toConsumableArray(event));
  expect(spy).not.toHaveBeenCalled();
}, {
  'single select > should not call onChange prop': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    event: ['keyDown', { keyCode: 27 }]
  },
  'multi select > should not call onChange prop': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    event: ['keyDown', { keyCode: 27 }]
  }
});

(0, _jestInCase2.default)('click to open select', function (_ref14) {
  var props = _ref14.props,
      expectedToFocus = _ref14.expectedToFocus;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onMenuOpen: function onMenuOpen() {} })));

  // this will get updated on input click, though click on input is not bubbling up to control component
  selectWrapper.setState({ isFocused: true });
  var controlComponent = selectWrapper.find('div.react-select__control');
  controlComponent.simulate('mouseDown', { target: { tagName: 'div' } });
  expect(selectWrapper.state('focusedOption')).toEqual(expectedToFocus);
}, {
  'single select > should focus the first option': {
    props: {
      options: _constants.OPTIONS
    },
    expectedToFocus: { label: '0', value: 'zero' }
  },
  'multi select > should focus the first option': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    },
    expectedToFocus: { label: '0', value: 'zero' }
  }
});

(0, _jestInCase2.default)('focus in select options', function (_ref15) {
  var props = _ref15.props,
      selectedOption = _ref15.selectedOption,
      nextFocusOption = _ref15.nextFocusOption,
      keyEvent = _ref15.keyEvent;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  var selectOption = selectWrapper.find('div.react-select__option').findWhere(function (n) {
    return n.props().children === selectedOption.label;
  });
  selectWrapper.setState({ focusedOption: selectedOption });

  expect(selectWrapper.state('focusedOption')).toEqual(selectedOption);

  selectOption.simulate('keyDown', keyEvent);
  expect(selectWrapper.state('focusedOption')).toEqual(nextFocusOption);
}, {
  'single select > ArrowDown key on first option should focus second option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 40, key: 'ArrowDown' },
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'single select > ArrowDown key on last option should focus first option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 40, key: 'ArrowDown' },
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'single select > ArrowUp key on first option should focus last option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 38, key: 'ArrowUp' },
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'single select > ArrowUp key on last option should focus second last option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 38, key: 'ArrowUp' },
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 2]
  },
  'single select > PageDown key takes us to next page with default page size of 5': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 34, key: 'PageDown' },
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[5]
  },
  'single select > PageDown key takes to the last option is options below is less then page size': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 34, key: 'PageDown' },
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 3],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'single select > PageUp key takes us to previous page with default page size of 5': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 33, key: 'PageUp' },
    selectedOption: _constants.OPTIONS[6],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'single select > PageUp key takes us to first option - previous options < pageSize': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 33, key: 'PageUp' },
    selectedOption: _constants.OPTIONS[1],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'single select > Home key takes up to the first option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 36, key: 'Home' },
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 3],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'single select > End key takes down to the last option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 35, key: 'End' },
    selectedOption: _constants.OPTIONS[2],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'multi select > ArrowDown key on first option should focus second option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 40, key: 'ArrowDown' },
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'multi select > ArrowDown key on last option should focus first option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 40, key: 'ArrowDown' },
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'multi select > ArrowUp key on first option should focus last option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 38, key: 'ArrowUp' },
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'multi select > ArrowUp key on last option should focus second last option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 38, key: 'ArrowUp' },
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 2]
  },
  'multi select > PageDown key takes us to next page with default page size of 5': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 34, key: 'PageDown' },
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[5]
  },
  'multi select > PageDown key takes to the last option is options below is less then page size': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 34, key: 'PageDown' },
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 3],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'multi select > PageUp key takes us to previous page with default page size of 5': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 33, key: 'PageUp' },
    selectedOption: _constants.OPTIONS[6],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'multi select > PageUp key takes us to first option - previous options < pageSize': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 33, key: 'PageUp' },
    selectedOption: _constants.OPTIONS[1],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'multi select > Home key takes up to the first option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 36, key: 'Home' },
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 3],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'multi select > End key takes down to the last option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: { keyCode: 35, key: 'End' },
    selectedOption: _constants.OPTIONS[2],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  }
});

// TODO: Cover more scenario
(0, _jestInCase2.default)('hitting escape with inputValue in select', function (_ref16) {
  var props = _ref16.props;

  var spy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onInputChange: spy, onMenuClose: jest.fn() })));

  selectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  expect(spy).toHaveBeenCalledWith('', { action: 'menu-close' });
}, {
  'single select > should call onInputChange prop with empty string as inputValue': {
    props: {
      inputValue: 'test',
      menuIsOpen: true,
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[0]
    }
  },
  'multi select > should call onInputChange prop with empty string as inputValue': {
    props: {
      inputValue: 'test',
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[0]
    }
  }
});

(0, _jestInCase2.default)('opening and closing select by clicking primary button on mouse', function (_ref17) {
  var props = _ref17.props;

  var onMenuOpenSpy = jest.fn();
  var onMenuCloseSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onMenuOpen: onMenuOpenSpy, onMenuClose: onMenuCloseSpy, onInputChange: jest.fn() })));
  var downButtonWrapper = selectWrapper.find('div.react-select__dropdown-indicator');

  // opens menu if menu is closed
  expect(selectWrapper.props().menuIsOpen).toBe(false);
  downButtonWrapper.simulate('mouseDown', { button: 0 });
  expect(onMenuOpenSpy).toHaveBeenCalled();

  // closes menu if menu is opened
  selectWrapper.setProps({ menuIsOpen: true });
  downButtonWrapper.simulate('mouseDown', { button: 0 });
  expect(onMenuCloseSpy).toHaveBeenCalled();
}, {
  'single select > should call onMenuOpen prop when select is opened and onMenuClose prop when select is closed': {
    props: {
      options: _constants.OPTIONS
    }
  },
  'multi select > should call onMenuOpen prop when select is opened and onMenuClose prop when select is closed': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('clicking on select using secondary button on mouse', function (_ref18) {
  var props = _ref18.props;

  var onMenuOpenSpy = jest.fn();
  var onMenuCloseSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onMenuOpen: onMenuOpenSpy, onMenuClose: onMenuCloseSpy })));
  var downButtonWrapper = selectWrapper.find('div.react-select__dropdown-indicator');

  // opens menu if menu is closed
  expect(selectWrapper.props().menuIsOpen).toBe(false);
  downButtonWrapper.simulate('mouseDown', { button: 1 });
  expect(onMenuOpenSpy).not.toHaveBeenCalled();

  // closes menu if menu is opened
  selectWrapper.setProps({ menuIsOpen: true });
  downButtonWrapper.simulate('mouseDown', { button: 1 });
  expect(onMenuCloseSpy).not.toHaveBeenCalled();
}, {
  'single select > seconday click is ignored  >should not call onMenuOpen and onMenuClose prop': {
    props: {
      options: _constants.OPTIONS
    }
  },
  'multi select > seconday click is ignored > should not call onMenuOpen and onMenuClose prop': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('required prop on input element', function (_ref19) {
  var props = _ref19.props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onInputChange: jest.fn() })));
  var inputWrapper = selectWrapper.find('input');
  expect(inputWrapper.props().required).toBeUndefined();
}, {
  'single select > should not have required attribute': {
    props: {
      options: _constants.OPTIONS
    }
  },
  'multi select > should not have required attribute': {
    props: {
      options: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('value of hidden input control', function (_ref20) {
  var _ref20$props = _ref20.props,
      props = _ref20$props === undefined ? { options: _constants.OPTIONS } : _ref20$props,
      expectedValue = _ref20.expectedValue;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  var hiddenInput = selectWrapper.find('input[type="hidden"]');
  expect(hiddenInput.props().value).toEqual(expectedValue);
}, {
  'single select > should set value of input as value prop': {
    props: {
      name: 'sample-text',
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[3]
    },
    expectedValue: 'three'
  },
  'single select > options with number values > should set value of input as value prop': {
    props: {
      name: 'sample-text',
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[3]
    },
    expectedValue: 3
  },
  'single select > options with boolean values > should set value of input as value prop': {
    props: {
      name: 'sample-text',
      options: _constants.OPTIONS_BOOLEAN_VALUE,
      value: _constants.OPTIONS_BOOLEAN_VALUE[1]
    },
    expectedValue: false
  },
  'multi select > should set value of input as value prop': {
    props: {
      isMulti: true,
      name: 'sample-text',
      options: _constants.OPTIONS,
      value: _constants.OPTIONS[3]
    },
    expectedValue: 'three'
  },
  'multi select > with delimiter prop > should set value of input as value prop': {
    props: {
      delimiter: ', ',
      isMulti: true,
      name: 'sample-text',
      options: _constants.OPTIONS,
      value: [_constants.OPTIONS[3], _constants.OPTIONS[5]]
    },
    expectedValue: 'three, five'
  },
  'multi select > options with number values > should set value of input as value prop': {
    props: {
      isMulti: true,
      name: 'sample-text',
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[3]
    },
    expectedValue: 3
  },
  'multi select > with delimiter prop > options with number values > should set value of input as value prop': {
    props: {
      delimiter: ', ',
      isMulti: true,
      name: 'sample-text',
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: [_constants.OPTIONS_NUMBER_VALUE[3], _constants.OPTIONS_NUMBER_VALUE[1]]
    },
    expectedValue: '3, 1'
  },
  'multi select > options with boolean values > should set value of input as value prop': {
    props: {
      isMulti: true,
      name: 'sample-text',
      options: _constants.OPTIONS_BOOLEAN_VALUE,
      value: _constants.OPTIONS_BOOLEAN_VALUE[1]
    },
    expectedValue: false
  },
  'multi select > with delimiter prop > options with boolean values > should set value of input as value prop': {
    props: {
      delimiter: ', ',
      isMulti: true,
      name: 'sample-text',
      options: _constants.OPTIONS_BOOLEAN_VALUE,
      value: [_constants.OPTIONS_BOOLEAN_VALUE[1], _constants.OPTIONS_BOOLEAN_VALUE[0]]
    },
    expectedValue: 'false, true'
  }
});
(0, _jestInCase2.default)('isOptionDisabled() prop', function (_ref21) {
  var props = _ref21.props,
      expectedEnabledOption = _ref21.expectedEnabledOption,
      expectedDisabledOption = _ref21.expectedDisabledOption;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));

  var enabledOptions = selectWrapper.find('Option[isDisabled=false]').filterWhere(function (n) {
    return !n.props().isDisabled;
  });
  var enabledOptionsValues = enabledOptions.map(function (option) {
    return option.text();
  });
  enabledOptionsValues.map(function (option) {
    expect(expectedDisabledOption.indexOf(option)).toBe(-1);
  });

  var disabledOptions = selectWrapper.find('Option[isDisabled=false]').filterWhere(function (n) {
    return n.props().isDisabled;
  });
  var disabledOptionsValues = disabledOptions.map(function (option) {
    return option.text();
  });
  disabledOptionsValues.map(function (option) {
    expect(expectedEnabledOption.indexOf(option)).toBe(-1);
  });
}, {
  'single select > should add isDisabled as true prop only options that are disabled': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS,
      isOptionDisabled: function isOptionDisabled(option) {
        return ['zero', 'two', 'five', 'ten'].indexOf(option.value) > -1;
      }
    },
    expectedEnabledOption: ['1', '3', '11'],
    expectedDisabledOption: ['0', '2', '5']
  },
  'multi select > should add isDisabled as true prop only options that are disabled': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS,
      isOptionDisabled: function isOptionDisabled(option) {
        return ['zero', 'two', 'five', 'ten'].indexOf(option.value) > -1;
      }
    },
    expectedEnabledOption: ['1', '3', '11'],
    expectedDisabledOption: ['0', '2', '5']
  }
});
(0, _jestInCase2.default)('isDisabled prop', function (_ref22) {
  var props = _ref22.props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.props().isDisabled).toBeTruthy();

  var controlWrapper = selectWrapper.find(Control);
  expect(controlWrapper.props().isDisabled).toBeTruthy();

  var valueWrapper = selectWrapper.find(ValueContainer);
  expect(valueWrapper.props().isDisabled).toBeTruthy();

  var indicatorsContainerWrapper = selectWrapper.find(IndicatorsContainer);
  expect(indicatorsContainerWrapper.props().isDisabled).toBeTruthy();

  var DropdownIndicatorWrapper = selectWrapper.find(DropdownIndicator);
  expect(DropdownIndicatorWrapper.props().isDisabled).toBeTruthy();
}, {
  'single select > should add isDisabled prop to select components': {
    props: {
      isDisabled: true,
      options: _constants.OPTIONS
    }
  },
  'multi select > should add isDisabled prop to select components': {
    props: {
      isDisabled: true,
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});