'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuPortal = exports.menuPortalCSS = exports.LoadingMessage = exports.NoOptionsMessage = exports.loadingMessageCSS = exports.noOptionsMessageCSS = exports.MenuList = exports.menuListCSS = exports.Menu = exports.menuCSS = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.getMenuPlacement = getMenuPlacement;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _utils = require('../utils');

var _primitives = require('../primitives');

var _theme = require('../theme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// ==============================
// Menu
// ==============================

// Get Menu Placement
// ------------------------------

function getMenuPlacement(_ref) {
  var maxHeight = _ref.maxHeight,
      menuEl = _ref.menuEl,
      minHeight = _ref.minHeight,
      placement = _ref.placement,
      shouldScroll = _ref.shouldScroll;

  var scrollParent = (0, _utils.getScrollParent)(menuEl);
  var optimisticState = { placement: 'bottom', maxHeight: maxHeight };

  // something went wrong, return optimistic state
  if (!menuEl || !menuEl.offsetParent) return optimisticState;

  // can't trust `scrollParent.scrollHeight` --> it increases when the menu is rendered

  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(),
      scrollHeight = _scrollParent$getBoun.height;

  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(),
      menuBottom = _menuEl$getBoundingCl.bottom,
      menuHeight = _menuEl$getBoundingCl.height,
      menuTop = _menuEl$getBoundingCl.top;

  // $FlowFixMe function returns above if there's no offsetParent


  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(),
      containerTop = _menuEl$offsetParent$.top;

  var viewHeight = (0, _utils.normalizedHeight)(scrollParent);
  var scrollTop = (0, _utils.getScrollTop)(scrollParent);

  var viewSpaceAbove = containerTop - _theme.spacing.menuGutter;
  var viewSpaceBelow = viewHeight - menuTop;
  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
  var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;

  var scrollDown = menuBottom - viewHeight + scrollTop + _theme.spacing.menuGutter;
  var scrollUp = scrollTop + menuTop - _theme.spacing.menuGutter;
  var scrollDuration = 160;

  switch (placement) {
    case 'auto':
    case 'bottom':
      // 1: the menu will fit, do nothing
      if (viewSpaceBelow >= menuHeight) {
        return { placement: 'bottom', maxHeight: maxHeight };
      }

      // 2: the menu will fit, if scrolled
      if (scrollSpaceBelow >= menuHeight) {
        if (shouldScroll) {
          (0, _utils.animatedScrollTo)(scrollParent, scrollDown, scrollDuration);
        }

        return { placement: 'bottom', maxHeight: maxHeight };
      }

      // 3: the menu will fit, if constrained
      if (scrollSpaceBelow >= minHeight) {
        if (shouldScroll) {
          (0, _utils.animatedScrollTo)(scrollParent, scrollDown, scrollDuration);
        }

        // we want to provide as much of the menu as possible to the user,
        // so give them whatever is available below rather than the minHeight.
        var constrainedHeight = scrollSpaceBelow - _theme.spacing.menuGutter;

        return {
          placement: 'bottom',
          maxHeight: constrainedHeight
        };
      }

      // 4. Forked beviour when there isn't enough space below

      // AUTO: flip the menu, render above
      if (placement === 'auto') {
        return { placement: 'top', maxHeight: maxHeight };
      }

      // BOTTOM: allow browser to increase scrollable area and immediately set scroll
      if (placement === 'bottom') {
        (0, _utils.scrollTo)(scrollParent, scrollDown);
        return { placement: 'bottom', maxHeight: maxHeight };
      }
      break;
    case 'top':
      // 1: the menu will fit, do nothing
      if (viewSpaceAbove >= menuHeight) {
        return { placement: 'top', maxHeight: maxHeight };
      }

      // 2: the menu will fit, if scrolled
      if (scrollSpaceAbove >= menuHeight) {
        if (shouldScroll) {
          (0, _utils.animatedScrollTo)(scrollParent, scrollUp, scrollDuration);
        }

        return { placement: 'top', maxHeight: maxHeight };
      }

      // 3: the menu will fit, if constrained
      if (scrollSpaceAbove >= minHeight) {
        if (shouldScroll) {
          (0, _utils.animatedScrollTo)(scrollParent, scrollUp, scrollDuration);
        }

        // we want to provide as much of the menu as possible to the user,
        // so give them whatever is available below rather than the minHeight.
        var _constrainedHeight = scrollSpaceAbove - _theme.spacing.menuGutter;

        return {
          placement: 'top',
          maxHeight: _constrainedHeight
        };
      }

      // 4. not enough space, the browser WILL NOT increase scrollable area when
      // absolutely positioned element rendered above the viewport (only below).
      // Flip the menu, render below
      return { placement: 'bottom', maxHeight: maxHeight };
    default:
      throw new Error('Invalid placement provided "' + placement + '".');
  }

  // fulfil contract with flow: implicit return value of undefined
  return optimisticState;
}

// Menu Component
// ------------------------------

function alignToControl(placement) {
  var placementToCSSProp = { bottom: 'top', top: 'bottom' };
  return placement ? placementToCSSProp[placement] : 'bottom';
}
var coercePlacement = function coercePlacement(p) {
  return p === 'auto' ? 'bottom' : p;
};

var menuCSS = exports.menuCSS = function menuCSS(_ref2) {
  var _ref3;

  var maxHeight = _ref2.maxHeight,
      placement = _ref2.placement;
  return _ref3 = {}, _defineProperty(_ref3, alignToControl(placement), '100%'), _defineProperty(_ref3, 'backgroundColor', _theme.colors.neutral0), _defineProperty(_ref3, 'borderRadius', _theme.borderRadius), _defineProperty(_ref3, 'boxShadow', '0 0 0 1px ' + _theme.colors.neutral10a + ', 0 4px 11px ' + _theme.colors.neutral10a), _defineProperty(_ref3, 'display', 'flex '), _defineProperty(_ref3, 'flexDirection', 'column'), _defineProperty(_ref3, 'marginBottom', _theme.spacing.menuGutter), _defineProperty(_ref3, 'marginTop', _theme.spacing.menuGutter), _defineProperty(_ref3, 'maxHeight', maxHeight), _defineProperty(_ref3, 'position', 'absolute'), _defineProperty(_ref3, 'width', '100%'), _defineProperty(_ref3, 'zIndex', 1), _ref3;
};

var Menu = exports.Menu = function (_Component) {
  _inherits(Menu, _Component);

  function Menu() {
    var _ref4;

    var _temp, _this, _ret;

    _classCallCheck(this, Menu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref4 = Menu.__proto__ || Object.getPrototypeOf(Menu)).call.apply(_ref4, [this].concat(args))), _this), _this.state = {
      maxHeight: _this.props.maxMenuHeight,
      placement: null
    }, _this.getPlacement = function (ref) {
      var _this$props = _this.props,
          minMenuHeight = _this$props.minMenuHeight,
          maxMenuHeight = _this$props.maxMenuHeight,
          menuPlacement = _this$props.menuPlacement,
          scrollMenuIntoView = _this$props.scrollMenuIntoView;


      if (!ref) return;

      var state = getMenuPlacement({
        maxHeight: maxMenuHeight,
        menuEl: ref,
        minHeight: minMenuHeight,
        placement: menuPlacement,
        shouldScroll: scrollMenuIntoView
      });

      _this.setState(state);
    }, _this.getState = function () {
      var menuPlacement = _this.props.menuPlacement;

      var placement = _this.state.placement || coercePlacement(menuPlacement);

      return _extends({}, _this.props, { placement: placement, maxHeight: _this.state.maxHeight });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Menu, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          getStyles = _props.getStyles,
          innerProps = _props.innerProps;


      return _react2.default.createElement(
        _primitives.Div,
        _extends({
          className: (0, _utils.className)('menu'),
          css: getStyles('menu', this.getState()),
          innerRef: this.getPlacement
        }, innerProps),
        children
      );
    }
  }]);

  return Menu;
}(_react.Component);

exports.default = Menu;

// ==============================
// Menu List
// ==============================

var menuListCSS = exports.menuListCSS = function menuListCSS() {
  return {
    flexGrow: 1,
    overflowY: 'auto',
    paddingBottom: _theme.spacing.baseUnit,
    paddingTop: _theme.spacing.baseUnit,
    position: 'relative', // required for offset[Height, Top] > keyboard scroll
    WebkitOverflowScrolling: 'touch'
  };
};
var MenuList = exports.MenuList = function MenuList(props) {
  var children = props.children,
      getStyles = props.getStyles,
      isMulti = props.isMulti,
      innerProps = props.innerProps;

  return _react2.default.createElement(
    _primitives.Div,
    _extends({
      className: (0, _utils.className)('menu-list', { isMulti: isMulti }),
      css: getStyles('menuList', props)
    }, innerProps),
    children
  );
};

// ==============================
// Menu Notices
// ==============================

var noticeCSS = function noticeCSS() {
  return {
    color: _theme.colors.neutral40,
    padding: _theme.spacing.baseUnit * 2 + 'px ' + _theme.spacing.baseUnit * 3 + 'px',
    textAlign: 'center'
  };
};
var noOptionsMessageCSS = exports.noOptionsMessageCSS = noticeCSS;
var loadingMessageCSS = exports.loadingMessageCSS = noticeCSS;

var NoOptionsMessage = exports.NoOptionsMessage = function NoOptionsMessage(props) {
  var children = props.children,
      getStyles = props.getStyles,
      innerProps = props.innerProps;

  return _react2.default.createElement(
    _primitives.Div,
    _extends({
      className: (0, _utils.className)(['menu-notice', 'menu-notice--no-options']),
      css: getStyles('noOptionsMessage', props)
    }, innerProps),
    children
  );
};
NoOptionsMessage.defaultProps = {
  children: 'No options'
};

var LoadingMessage = exports.LoadingMessage = function LoadingMessage(props) {
  var children = props.children,
      getStyles = props.getStyles,
      innerProps = props.innerProps;

  return _react2.default.createElement(
    _primitives.Div,
    _extends({
      className: (0, _utils.className)(['menu-notice', 'menu-notice--loading']),
      css: getStyles('loadingMessage', props)
    }, innerProps),
    children
  );
};
LoadingMessage.defaultProps = {
  children: 'Loading...'
};

// ==============================
// Menu Portal
// ==============================

var menuPortalCSS = exports.menuPortalCSS = function menuPortalCSS(_ref5) {
  var placement = _ref5.placement,
      rect = _ref5.rect,
      offset = _ref5.offset,
      viewHeight = _ref5.viewHeight;
  return {
    bottom: placement === 'top' ? viewHeight - offset : null,
    left: rect.left,
    position: 'absolute',
    top: placement === 'bottom' ? offset : null,
    width: rect.width
  };
};

var MenuPortal = exports.MenuPortal = function MenuPortal(_ref6) {
  var appendTo = _ref6.appendTo,
      children = _ref6.children,
      controlElement = _ref6.controlElement,
      menuPlacement = _ref6.menuPlacement,
      getStyles = _ref6.getStyles;

  var viewHeight = window && window.innerHeight;

  // bail early if required elements aren't present
  if (!appendTo || !controlElement || !viewHeight) return null;

  var placement = coercePlacement(menuPlacement);
  var rect = (0, _utils.getBoundingClientObj)(controlElement);
  var offset = rect[placement] + window.pageYOffset;

  return (0, _reactDom.createPortal)(_react2.default.createElement(
    _primitives.Div,
    {
      css: getStyles('menuPortal', { placement: placement, rect: rect, offset: offset, viewHeight: viewHeight })
    },
    children
  ),
  // $FlowFixMe this is accounted for above
  appendTo);
};